import pytest
from hmm.params import conditional_random_ergodic_hmm_params
from data.data import observations
import numpy
import hmm.bw as bw
from hmm.params import HmmParams
from test.assertions import assert_valid_hmm_params

@pytest.fixture(name="n_states", params=[i for i in range(2, 21)])
def _n_states(request):
    return request.param

@pytest.fixture
def observation():
    # return observations([numpy.array([1,2,3,2,1,2,5,4,1,2,4]) - 1])
    return observations([numpy.arange(3)])

@pytest.fixture
def hmm_params():
    start_vector = numpy.array([1,0,0,0], dtype=numpy.float64)
    emission_matrix = numpy.array([
        [1, 0, 0],
        [0, 1, 0],
        [0, 0, 1],
        [1/3, 1/3, 1/3]], dtype=numpy.float64)
    transition_matrix = numpy.array([
        [0, 1, 0, 0],
        [0, 0, 1, 0],
        [0, 0, 0, 1],
        [0.25, 0.25, 0.25, 0.25]
    ], dtype=numpy.float64)
    return HmmParams(start_vector, emission_matrix, transition_matrix)


@pytest.fixture
def hmm_params_soos():
    # return conditional_random_ergodic_hmm_params(n_states, n_symbols=5)

    start_vector = numpy.array([7.91291432e-01, 3.52463154e-02, 1.15673712e-01, 1.96442422e-03,
       2.50614430e-02, 2.22611385e-02, 1.17778575e-04, 5.02153314e-03,
       2.15717131e-03, 1.20505185e-03])

    transition_matrix = numpy.array([[8.46669491e-01, 2.40729078e-02, 5.06009435e-03, 7.43229677e-02,
        4.62991526e-02, 6.86885139e-04, 2.40361179e-03, 4.03981616e-04,
        1.55275895e-05, 6.53809049e-05],
       [9.53356773e-01, 2.01909581e-02, 4.43880175e-03, 1.10206142e-02,
        1.51172852e-03, 8.88877126e-03, 8.72762189e-05, 2.80549911e-04,
        7.73388521e-05, 1.47187808e-04],
       [8.78942487e-01, 9.61978309e-02, 1.13212732e-04, 1.58998665e-02,
        5.40590934e-05, 8.52938257e-03, 8.02547831e-05, 1.45266534e-04,
        2.90894101e-05, 8.55071937e-06],
       [2.97614187e-01, 4.80430672e-01, 1.19719759e-01, 8.93526072e-02,
        6.92976154e-03, 2.25570414e-03, 2.09591474e-03, 6.19423097e-04,
        5.93904812e-04, 3.88066893e-04],
       [2.79900953e-01, 3.28305123e-01, 3.14616906e-01, 4.19066707e-02,
        4.07401208e-03, 2.97354678e-02, 1.10692971e-03, 3.52361978e-04,
        1.13642010e-06, 4.39241295e-07],
       [5.99863623e-01, 3.24985041e-01, 4.96985428e-02, 2.18145170e-02,
        3.43301651e-03, 4.62758246e-05, 9.84182026e-05, 7.43343098e-06,
        4.64735484e-05, 6.65872482e-06],
       [9.96253507e-01, 8.18018475e-04, 6.23980588e-04, 1.33785072e-03,
        6.65036084e-05, 9.71278369e-05, 4.55871690e-04, 2.83592830e-04,
        2.77731699e-05, 3.57743331e-05],
       [8.52695724e-01, 1.37334203e-01, 7.64659178e-03, 1.41667111e-04,
        4.98397113e-04, 1.44771435e-03, 1.84337463e-04, 3.54412150e-05,
        8.92726157e-07, 1.50307766e-05],
       [3.97164752e-01, 5.14993658e-01, 5.50829376e-02, 8.40529791e-03,
        7.48008952e-03, 1.08716687e-02, 2.92493965e-03, 4.73342629e-04,
        1.81928799e-03, 7.84025920e-04],
       [5.44797721e-01, 3.63665130e-01, 6.03333988e-02, 2.40798108e-02,
        4.71935777e-03, 5.93827130e-04, 1.33262926e-03, 4.40451806e-04,
        1.31060660e-05, 2.45671362e-05]])

    emission_matrix = numpy.array([[0.86573365, 0.08021154, 0.04936678, 0.00250344, 0.00218458],
       [0.11740867, 0.31118021, 0.4627049 , 0.01075057, 0.09795564],
       [0.81739954, 0.08134377, 0.08088308, 0.0011861 , 0.01918751],
       [0.01123868, 0.31595726, 0.55386791, 0.06500339, 0.05393276],
       [0.5146234 , 0.30026936, 0.1221081 , 0.03110921, 0.03188994],
       [0.89250892, 0.03585977, 0.05473613, 0.0132165 , 0.00367867],
       [0.20375777, 0.39985986, 0.17237477, 0.1521813 , 0.0718263 ],
       [0.88718116, 0.04840451, 0.04595665, 0.0017094 , 0.01674828],
       [0.19847071, 0.12893293, 0.35823639, 0.05561883, 0.25874114],
       [0.32243186, 0.19597294, 0.34155551, 0.12256399, 0.01747571]])

    return HmmParams(start_vector, emission_matrix, transition_matrix)

    
def test_train_single_hmm_with_stop_conditions(observation, hmm_params):
    
    assert_valid_hmm_params(hmm_params)
    hmm_params, trace = bw.train_single_hmm(hmm_params, observation, n_iterations=50)

    assert False